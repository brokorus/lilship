---
# Source: puppetserver/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: puppetserver-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.4.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-password: "dW5icmVha2FibGVQYXNzd29yZA=="
---
# Source: puppetserver/templates/puppetdb-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: puppetdb-secret
  labels:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
type: Opaque
data:
  username: "cHVwcGV0ZGI="
  password: "dW5icmVha2FibGVQYXNzd29yZA=="
---
# Source: puppetserver/templates/postgresql-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-custom-extensions
  labels:
    component: "postgresql"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
data:
  extensions.sql: |
    CREATE EXTENSION IF NOT EXISTS pg_trgm;
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
---
# Source: puppetserver/templates/puppetserver-manifests-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: manifests-config
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
data:
  site.pp: |
    hiera_include('classes')
---
# Source: puppetserver/templates/r10k-code.configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: r10k-code-config
  labels:
    component: "r10k"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
data:
  r10k_code.yaml: |
    # The location to use for storing cached Git repos
    cachedir: '/etc/puppetlabs/code/r10k_cache'
    # A list of git repositories to create
    git:
      provider: 'shellgit'
      private_key: '/root/.ssh/id_rsa'
      username: 'root'
    sources:
      # This will clone the git repository and instantiate an environment per
      # branch in '/etc/puppetlabs/code/environments'
      puppet_repo:
        remote: 'ssh://git@lilgitserver:22/tmp/lilship/demo-control-repo.git'
        basedir: '/etc/puppetlabs/code/environments'
        ignore_branch_prefixes:
          - 'default'

  r10k_code_cronjob.sh: |
    #!/usr/bin/env sh
    /docker-entrypoint.sh deploy environment --config /etc/puppetlabs/puppet/r10k_code.yaml \
    --puppetfile  > ~/.r10k_code_cronjob.out 2>&1
    retVal=$?
    if [ "$retVal" -eq "0" ]; then
      touch ~/.r10k_code_cronjob.success > /dev/null 2>&1
    else
      rm ~/.r10k_code_cronjob.success > /dev/null 2>&1
    fi
    exit $retVal

  r10k_code_entrypoint.sh: |
    #!/usr/bin/env sh
    set -e
    cat > ~/.r10k_code_crontab <<'EOF'
    */5 * * * * /bin/sh -c /etc/puppetlabs/puppet/r10k_code_cronjob.sh
    EOF
    tail -Fq ~/.r10k_code_cronjob.out &
    touch ~/.r10k_code_cronjob.success > /dev/null 2>&1
    exec supercronic ~/.r10k_code_crontab
---
# Source: puppetserver/templates/puppetdb-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: puppetdb-claim
  labels:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "400Mi"
---
# Source: puppetserver/templates/puppetserver-code-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: puppet-code-claim
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "400Mi"
---
# Source: puppetserver/templates/puppetserver-data-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: puppet-serverdata-claim
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "400Mi"
---
# Source: puppetserver/templates/puppetserver-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: puppet-puppet-claim
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "400Mi"
---
# Source: puppetserver/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: puppetserver-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.4.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: puppetserver/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: puppetserver-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.4.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
    role: master
---
# Source: puppetserver/templates/puppetdb-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: puppetdb
  labels:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  ports:
    - name: pdb-http
      port: 8080
    - name: pdb-https
      port: 8081
    - name: puppetboard
      port: 80
  selector:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
---
# Source: puppetserver/templates/puppetserver-service-masters.yaml
apiVersion: v1
kind: Service
metadata:
  name: puppet
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  ports:
    - name: puppetserver
      port: 8140
  selector:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
  type: ClusterIP
---
# Source: puppetserver/templates/puppetdb-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: puppetserver-puppetdb
  labels:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: "puppetdb"
      app: puppetserver
      release: puppetserver
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: "puppetdb"
        app: puppetserver
        release: puppetserver
        chart: puppetserver-5.1.0
        heritage: Helm
    spec:
      hostname: puppetdb
      containers:
        - name: puppetdb
          image: "puppet/puppetdb:6.12.0"
          imagePullPolicy: "IfNotPresent"
          resources:
            {}
          env:
            - name: PUPPETSERVER_HOSTNAME
              value: "puppet"
            - name: PUPPETSERVER_PORT
              value: "8140"
            - name: PUPPETDB_POSTGRES_HOSTNAME
              value: "puppetserver-postgresql"
            - name: PUPPETDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: puppetdb-secret
                  key: password
            - name: PUPPETDB_USER
              valueFrom:
                secretKeyRef:
                  name: puppetdb-secret
                  key: username
          ports:
            - name: pdb-http
              containerPort: 8080
            - name: pdb-https
              containerPort: 8081
          volumeMounts:
            - name: puppetdb-storage
              mountPath: /opt/puppetlabs/server/data/puppetdb/certs
        - name: puppetboard
          image: "xtigyro/puppetboard:2.2.0"
          imagePullPolicy: "IfNotPresent"
          resources:
            {}
          env:
            - name: PUPPETDB_HOST
              value: "puppetdb"
            - name: PUPPETDB_PORT
              value: "8081"
            - name: PUPPETDB_SSL_VERIFY
              value: "/opt/puppetlabs/server/data/puppetdb/certs/certs/ca.pem"
            - name: PUPPETDB_CERT
              value: "/opt/puppetlabs/server/data/puppetdb/certs/certs/public.pem"
            - name: PUPPETDB_KEY
              value: "/opt/puppetlabs/server/data/puppetdb/certs/private_keys/private.pem"
          ports:
            - name: puppetboard
              containerPort: 80
          volumeMounts:
            - name: puppetdb-storage
              mountPath: /opt/puppetlabs/server/data/puppetdb/certs
      volumes:
        - name: puppetdb-storage
          persistentVolumeClaim:
            claimName: puppetdb-claim
---
# Source: puppetserver/templates/puppetserver-deployment-masters.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: puppetserver-puppetserver-master
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: "puppetserver"
      app: puppetserver
      release: puppetserver
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 20%
      maxUnavailable: 0%
  template:
    metadata:
      labels:
        component: "puppetserver"
        app: puppetserver
        release: puppetserver
        chart: puppetserver-5.1.0
        heritage: Helm
      annotations:
        checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      hostname: puppet
      initContainers:
        - name: perms-and-dirs
          image: "puppet/puppetserver:6.12.1"
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              memory: 128Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 300m
          command: [ "sh", "-c" ]
          args:
            - mkdir -p /etc/puppetlabs/puppet/eyaml/keys;
              mkdir -p /etc/puppetlabs/code/environments;
              mkdir -p /etc/puppetlabs/puppet/manifests;
              mkdir -p /etc/puppetlabs/code/r10k_cache;
              chown -R puppet:puppet /etc/puppetlabs;
              cp /etc/puppetlabs/puppet/configmap/r10k_code_entrypoint.sh /etc/puppetlabs/puppet/r10k_code_entrypoint.sh;
              cp /etc/puppetlabs/puppet/configmap/r10k_code_cronjob.sh /etc/puppetlabs/puppet/r10k_code_cronjob.sh;
              cp /etc/puppetlabs/puppet/configmap/r10k_code.yaml /etc/puppetlabs/puppet/r10k_code.yaml;
              chown puppet:puppet /etc/puppetlabs/puppet/r10k_code_entrypoint.sh /etc/puppetlabs/puppet/r10k_code_cronjob.sh /etc/puppetlabs/puppet/r10k_code.yaml;
              chmod +x /etc/puppetlabs/puppet/r10k_code_entrypoint.sh /etc/puppetlabs/puppet/r10k_code_cronjob.sh;
              cp /etc/puppetlabs/puppet/configmap/site.pp /etc/puppetlabs/puppet/manifests/site.pp;
              chown puppet:puppet /etc/puppetlabs/puppet/manifests/site.pp;
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
            privileged: true
          volumeMounts:
            - name: puplilconfig
              mountPath: "/etc/puppetlabs/puppet/kubeconfig"
              readOnly: true
            - name: lilconfig
              mountPath: "/root/.kube/config"
              readOnly: true
            - name: puppet-code-storage
              mountPath: /etc/puppetlabs/code/
            - name: puppet-puppet-storage
              mountPath: /etc/puppetlabs/puppet/
            - name: r10k-code-volume
              mountPath: /etc/puppetlabs/puppet/configmap/r10k_code_entrypoint.sh
              subPath: r10k_code_entrypoint.sh
            - name: r10k-code-volume
              mountPath: /etc/puppetlabs/puppet/configmap/r10k_code_cronjob.sh
              subPath: r10k_code_cronjob.sh
            - name: r10k-code-volume
              mountPath: /etc/puppetlabs/puppet/configmap/r10k_code.yaml
              subPath: r10k_code.yaml
            - name: manifests-volume
              mountPath: /etc/puppetlabs/puppet/configmap/site.pp
              subPath: site.pp
      containers:
        - name: RELEASE-NAME-puppetserver
          image: "puppet/puppetserver:6.12.1"
          imagePullPolicy: "IfNotPresent"
          resources:
            {}
          env:
            # necessary to set certname and server in puppet.conf, required by
            # puppetserver ca cli application
            - name: PUPPETSERVER_HOSTNAME
              value: "puppet"
            - name: PUPPET_MASTERPORT
              value: "8140"
            - name: DNS_ALT_NAMES
              value: "agents-to-puppet,"
            - name: PUPPETDB_SERVER_URLS
              value: "https://puppetdb:8081"
            - name: CA_ALLOW_SUBJECT_ALT_NAMES
              value: "true"
          readinessProbe:
            httpGet:
              path: /status/v1/simple
              port: 8140
              scheme: HTTPS
            initialDelaySeconds: 180
            periodSeconds: 60
            timeoutSeconds: 20
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            tcpSocket:
              port: 8140
            initialDelaySeconds: 420
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          ports:
            - containerPort: 8140
          volumeMounts:
            - name: puppet-code-storage
              mountPath: /etc/puppetlabs/code/
            - name: puppet-puppet-storage
              mountPath: /etc/puppetlabs/puppet/
            - name: puppet-serverdata-storage
              mountPath: /opt/puppetlabs/server/data/puppetserver/
        # r10k Code Sidecar
        - name: r10k-code
          image: "puppet/r10k:3.5.2"
          imagePullPolicy: "IfNotPresent"
          resources:
            {}
          env:
          command: [ "sh", "-c", "/etc/puppetlabs/puppet/r10k_code_entrypoint.sh" ]
          securityContext:
            runAsUser: 999   # "puppet" UID
            runAsGroup: 999 # "puppet" GID
          volumeMounts:
          - name: gitssh
            mountPath: "/root/.ssh/"
            readOnly: true
          - name: puplilconfig
            mountPath: "/etc/puppetlabs/puppet/kubeconfig"
            readOnly: true
          - name: lilconfig
            mountPath: "/root/.kube/config"
            readOnly: true
          - name: puppet-code-storage
            mountPath: /etc/puppetlabs/code/
          - name: puppet-puppet-storage
            mountPath: /etc/puppetlabs/puppet/
          readinessProbe:
            exec:
              command: ["/bin/sh", "-ec", "test -f ~/.r10k_code_cronjob.success"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
      securityContext:
        fsGroup: 999   # "puppet" GID
      volumes:
        - name: gitssh
          secret:
            secretName: gitssh
        - name: puplilconfig
          secret:
            secretName: lilconfig
        - name: lilconfig
          secret:
            secretName: lilconfig
        - name: puppet-code-storage
          persistentVolumeClaim:
            claimName: puppet-code-claim
        - name: puppet-puppet-storage
          persistentVolumeClaim:
            claimName: puppet-puppet-claim
        - name: puppet-serverdata-storage
          persistentVolumeClaim:
            claimName: puppet-serverdata-claim
        - name: manifests-volume
          configMap:
            name: manifests-config
        - name: r10k-code-volume
          configMap:
            name: r10k-code-config
---
# Source: puppetserver/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: puppetserver-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.4.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: puppetserver-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: RELEASE-NAME
      role: master
  template:
    metadata:
      name: puppetserver-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.4.1
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: puppetserver-postgresql
          image: docker.io/bitnami/postgresql:11.9.0-debian-10-r16
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: POSTGRESQL_INITSCRIPTS_USERNAME
              value: postgres
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "puppetdb"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: puppetserver-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "puppetdb"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "puppetdb" -d "dbname=puppetdb" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "puppetdb" -d "dbname=puppetdb" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: postgresql-custom-extensions
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          helm.sh/resource-policy: keep
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "4Gi"
---
# Source: puppetserver/templates/puppetboard-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    component: "puppetdb"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
  name: puppetboard
spec:
  rules:
---
# Source: puppetserver/templates/puppetserver-ingress-masters.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    component: "puppetserver"
    app: puppetserver
    release: puppetserver
    chart: puppetserver-5.1.0
    heritage: Helm
  name: RELEASE-NAME-puppetserver-masters
spec:
  rules:
